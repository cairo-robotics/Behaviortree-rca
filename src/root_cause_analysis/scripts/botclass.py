import openai, os
import copy
from abc import ABC
from comment_parser import comment_parser

class Bot(ABC):
    def __init__(self) -> None:
        super().__init__()
        self.API_KEY        =  os.environ['OPEN_AI_API_KEY']
    
    def create_msg(self, msg: str) -> None:
        
        ########################################################
        #   Call scraper to read the code
        #   Call string manipulator to modify the string  
        #   Compile Server and client description into one
        ########################################################
        clientComments = comment_parser.extract_comments('/home/dt/HRIPapers/BehaviorTreeWork/src/pick_and_place/src/BTClient.cpp')
        serverComments = comment_parser.extract_comments('/home/dt/HRIPapers/BehaviorTreeWork/src/pick_and_place/src/BTClient.cpp')
        
        ClientClasses_keys = [str((i.text().split('\n')[1]).split(':')[0]).split('*')[1] for i in clientComments if ('*' in i.text()) and ('class' in i.text())]
        ClientClasses_vals = [str((i.text().split('\n')[1]).split(':')[1]).split(',')[0] for i in clientComments if ('*' in i.text()) and ('class' in i.text())]
        
        ClientClasses_dict = dict(zip(ClientClasses_keys, ClientClasses_vals))
        
        ClientTicks_vals   = [str((i.text().split('\n')[1]).split(':')[1]).split(',')[0] for i in clientComments if ('*' in i.text()) and ('tick function' in i.text())]
        
        ClientTicks_dict   = dict(zip(ClientClasses_keys, ClientTicks_vals))
        
        self.messages = f"{msg}\n\n---\nGenerated by OpenAI bot."
    
    def call_gpt(self) -> str:
        chat = openai.ChatCompletion.create(
            model="gpt-3.5-turbo", messages=self.messages
        )
        reply = chat.choices[0].message.content
